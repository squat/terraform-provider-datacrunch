openapi: 3.0.2
info:
  title: DataCrunch Provider
  version: 1.0.0
  description: Public API for datacrunch platform
  contact:
    name: DataCrunch
    url: datacrunch.io
    email: support@datacrunch.io
servers:
  - url: 'https://api.datacrunch.io/v1'
security:
  - bearer: []
tags:
  - name: Instances
    description: a datacrunch server instance
  - name: SSH keys
    description: ssh keys for your instances
  - name: Startup Scripts
    description: startup scripts that execute when an instance is deployed
  - name: Balance
    description: user balance
  - name: Authentication
  - name: Images
  - name: Instance Types
  - name: Volumes
  - name: Locations
paths:
  /instances:
    get:
      tags:
        - Instances
      summary: Get all instances
      description: 'Return all instances of the user, or all instances with a specific status (optional)'
      operationId: getAllInstances
      parameters:
        - in: query
          description: Return all user instances with specific status
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/InstanceStatus'
          example: running
      responses:
        '200':
          description: Returns an array of all the user's instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instances'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Instances
      description: "Deploy a new instance. Before deploying an instance, you need to add at least ssh key to be able to access your instance.\n\nYou can select one of the following [instance types](https://datacrunch.io/products/):\n\nTesla V100:\n`8V100.48M`,`8V100.48V`,`4V100.20V`,`2V100.10V`,`1V100.6V`\n\nRTX6000 Ada:\n`8RTX6000ADA.80V`, `4RTX6000ADA.40V`, `2RTX6000ADA.20V`, `1RTX6000ADA.10V`\n\nRTX A6000:\n`8A6000.80V`, `4A6000.40V`, `2A6000.20V`, `1A6000.10V`\n\nA100 80GB:\n`8A100.176V`, `4A100.88V`, `2A100.44V`, `1A100.22V`\n\nA100 SXM4 40GB:\n`8A100.40S.176V`, `4A100.40S.88V`, `2A100.40S.44V`, `1A100.40S.22V`\n\nCPU Nodes:\n`CPU.120V.480G`, `CPU.96V.384G`, `CPU.64V.256G`, `CPU.32V.128G`, `CPU.16V.64G`, `CPU.8V.32G`, `CPU.4V.16G`\n\n\nAvailable images can be listed using the `GET /images` endpoint - using the `image_type` value from the result. \n\nExisting detached OS volumes could be used as an image, put the volume id as the image value.\n\nThe following locations are available:\n`FIN-01` `ICE-01`\n\nIt's also possible to define new volumes that will be created and attached to the new instance. New volumes location will be the same as the instance.\n\nExisting detached volumes can be attached to the deployed server by adding their IDs in an array with the optional `existing_volumes` property.\n\nInstance hostname and description are mandatory."
      operationId: deployInstance
      requestBody:
        description: An instance deployment details object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployInstance'
            examples:
              deploy a single instance with single ssh key:
                summary: 'deploy a single 4V100.20V instance with ubuntu 20.04 os, with single ssh key id, a startup script id'
                value:
                  instance_type: 4V100.20V
                  image: ubuntu-20.04
                  ssh_key_ids: c935afea-1559-4c94-817a-d2c87f7c36cd
                  startup_script_id: 96ebbbd9-21a9-43cc-a146-6ce9cf59d2b2
                  hostname: UKKO-5
                  description: server for running lightning models
                  location_code: FIN-01
              'deploy a single instance with multiple ssh keys, no startup script':
                summary: 'deploy a single 1V100.6V instance with fastai image, with multiple ssh keys ids but no startup script id'
                value:
                  instance_type: 1V100.6V
                  image: fastai
                  ssh_key_ids:
                    - c935afea-1559-4c94-817a-d2c87f7c36cd
                    - 0ceddf93-b719-448a-9622-22806f5b7c8a
                  hostname: OiUkkoYlijumala
                  description: test instance
                  location_code: FIN-01
              deploy a single instance with an extra new volume:
                value:
                  instance_type: 8V100.48M
                  image: ubuntu-18.04
                  ssh_key_ids: 26d43424-229e-4b45-bae2-86eb1e919514
                  startup_script_id: 26d43424-229e-4b45-bae2-86eb1e919514
                  hostname: UKKO-6
                  description: server for running lightning models
                  location_code: FIN-01
                  volumes:
                    - name: main-storage
                      size: 200
                      type: NVMe
              deploy instance with an existing OS volume as an image:
                value:
                  instance_type: 8V100.48M
                  image: bc98750d-1ade-49ef-9a41-a905ac8295f8
                  ssh_key_ids: 26d43424-229e-4b45-bae2-86eb1e919514
                  startup_script_id: 26d43424-229e-4b45-bae2-86eb1e919514
                  hostname: string
                  description: string
                  location_code: FIN-01
              deploy an instance with custom OS volume size and name:
                value:
                  instance_type: 8V100.48M
                  image: ubuntu-18.04
                  ssh_key_ids: 26d43424-229e-4b45-bae2-86eb1e919514
                  startup_script_id: 26d43424-229e-4b45-bae2-86eb1e919514
                  hostname: string
                  description: string
                  location_code: FIN-01
                  os_volume:
                    name: OS Volume
                    size: 150
      responses:
        '202':
          description: 'Accepted, Instance is in process for deployment. Returns the instance ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceId'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '402':
          description: Not enough balance
        '503':
          description: Not enough resources at the moment
      summary: Deploy new instance
    put:
      tags:
        - Instances
      description: "Perform an action on a deployed instance or multiple instances.\n\n> Available actions are: \n`start`,`shutdown`,`hibernate`,`delete`\n\nNote: to `hibernate` an instance, you must first `shutdown` it. All instance volumes would be detached and the instance will be deleted.\n\nImportant: To remove an instance and stop charging your account, you must `delete` it. \nUsing `shutdown` will keep charging your account.\n\nWhen deleting an instance, you can specify which of it's attached volumes will be deleted by providing `volume_ids` array. \nAny attached volumes that are not specified in the array would be detached.\nNote: If not providing a `volume_ids` array, only the OS volume will be deleted and the rest detached."
      operationId: instanceAction
      requestBody:
        description: 'id of instances to perform the action on, and the action type'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  oneOf:
                    - $ref: '#/components/schemas/InstanceId'
                    - $ref: '#/components/schemas/InstanceIds'
                action:
                  $ref: '#/components/schemas/ActionType'
                volume_ids:
                  $ref: '#/components/schemas/VolumeIds'
              required:
                - id
                - action
            examples:
              perform an action on a single instance:
                summary: perform an action on a single instance
                value:
                  id: 26d43424-229e-4b45-bae2-86eb1e919514
                  action: start
              perform an action on multiple instances:
                summary: perform an action on multiple instances
                value:
                  id:
                    - 26d43424-229e-4b45-bae2-86eb1e919514
                    - d40707e1-b0e0-43d0-a3a6-22457f91f906
                  action: shutdown
              delete an instance and 2 of it's volumes:
                value:
                  id: 08458253-6954-4964-aec3-4084f509e05d
                  action: delete
                  volume_ids:
                    - 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    - 663f28a8-70c7-434f-8ab6-73b9c89a8c79
      responses:
        '202':
          description: Action accepted and will be performed
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenAction'
        '404':
          description: One or more instances were not found
      summary: Perform action on instance
  '/instances/{instanceId}':
    get:
      tags:
        - Instances
      description: Return instance details by instance id
      operationId: getInstanceById
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/InstanceId'
      responses:
        '200':
          description: Instance details object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Instance was not found
      summary: Get instance by id
  /instances/action:
    post:
      tags:
        - Instances
      description: "Perform an action on a deployed instance or multiple instances.\n\n> Available actions are: \n`start`,`shutdown`,`hibernate`,`delete`\n\nNote: to `hibernate` an instance, you must first `shutdown` it. All instance volumes would be detached and the instance will be deleted.\n\nNote: To remove an instance and stop charging your account, you must `delete` it. \nUsing `shutdown` will keep charging your account.\n\nWhen deleting an instance, you can specify which of it's attached volumes will be deleted by providing `volume_ids` array. \nAny attached volumes that are not specified in the array would be detached.\nNote: If not providing a `volume_ids` array, only the OS volume will be deleted and the rest detached."
      operationId: instanceActionDeprecated
      requestBody:
        description: 'id of instances to perform the action on, and the action type'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  oneOf:
                    - $ref: '#/components/schemas/InstanceId'
                    - $ref: '#/components/schemas/InstanceIds'
                action:
                  $ref: '#/components/schemas/ActionType'
                volume_ids:
                  $ref: '#/components/schemas/VolumeIds'
              required:
                - id
                - action
            examples:
              perform an action on a single instance:
                summary: perform an action on a single instance
                value:
                  id: 26d43424-229e-4b45-bae2-86eb1e919514
                  action: hibernate
              perform an action on multiple instances:
                summary: perform an action on multiple instances
                value:
                  id:
                    - 26d43424-229e-4b45-bae2-86eb1e919514
                    - d40707e1-b0e0-43d0-a3a6-22457f91f906
                  action: shutdown
              delete an instance with 2 of it's volumes:
                value:
                  id: 08458253-6954-4964-aec3-4084f509e05d
                  action: delete
                  volume_ids:
                    - 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    - 663f28a8-70c7-434f-8ab6-73b9c89a8c79
      responses:
        '202':
          description: Action accepted and will be performed
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden Action
        '404':
          description: One or more instances were not found
      summary: Perform action on instance (Deprecated)
      deprecated: true
  /sshkeys:
    get:
      tags:
        - SSH keys
      description: Return all ssh keys
      operationId: getSshKeys
      responses:
        '200':
          description: Returns an array of ssh key objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sshKeys'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Get ssh keys
    post:
      tags:
        - SSH keys
      description: Add a new ssh key
      operationId: addSshKeys
      requestBody:
        description: ssh key details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ssh key name
                key:
                  type: string
                  description: the actual public ssh key value
              required:
                - name
                - key
            example:
              name: Ukkos kantele
              key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC8orN63XfjrkUQUp7cye96/Lx/4gOfs6MzsKLCxX8ACDnXnI9eZkxXuJPr9i6Q+iXNkqcUTB9NyJnfuRx7okPFWvrpzRj3mEs9RZJQ+P3YSfblvxDe2AtRBTZtg2MP0j7afolthS6gdTfhSU+1oRSyvZz0zn0F7TCgem6vNekGLw== tuoni
      responses:
        '201':
          description: 'Key added, returns the internal ssh key id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sshKeyId'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Add ssh key
    delete:
      tags:
        - SSH keys
      description: 'Delete ssh key, or multiple keys'
      operationId: deleteSshKeys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keys:
                  $ref: '#/components/schemas/sshKeyIds'
              required:
                - keys
            examples:
              example-1:
                value:
                  keys:
                    - 26d43424-229e-4b45-bae2-86eb1e919514
                    - 767066ac-78fb-4b06-bbbf-0bbb37b516c7
      responses:
        '200':
          description: ssh key(s) deleted
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Delete ssh keys
      parameters: []
  '/sshkeys/{sshKeyId}':
    get:
      tags:
        - SSH keys
      description: Return ssh key by id
      operationId: getSshKeyById
      parameters:
        - name: sshKeyId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/sshKeyId'
      responses:
        '200':
          description: 'ssh key found, return key details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sshKey'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Get ssh key by id
    delete:
      tags:
        - SSH keys
      description: delete an ssh key by id
      operationId: deleteSshKeyById
      parameters:
        - name: sshKeyId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/sshKeyId'
      responses:
        '200':
          description: ssh key deleted
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Delete ssh key by id
    parameters: []
  /scripts:
    get:
      tags:
        - Startup Scripts
      description: Return all startup scripts
      operationId: getScripts
      responses:
        '200':
          description: an array of startup script objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupScripts'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Get all startup scripts
    post:
      tags:
        - Startup Scripts
      description: Add a new startup script
      operationId: addScripts
      requestBody:
        description: a startup script object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: script name
                script:
                  type: string
                  description: bash script content
              required:
                - name
                - script
            examples:
              Example:
                value:
                  name: download repo
                  script: |-
                    #!/bin/bash
                    # Your sh script here
      responses:
        '200':
          description: 'startup script added successfully, return id of the new script'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupScriptId'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Add startup script
    delete:
      tags:
        - Startup Scripts
      description: Delete a startup script or multiple startup scripts
      operationId: deleteScripts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scripts:
                  $ref: '#/components/schemas/StartupScriptIds'
              required:
                - scripts
            examples:
              Example:
                value:
                  scripts:
                    - 26d43424-229e-4b45-bae2-86eb1e919514
                    - 767066ac-78fb-4b06-bbbf-0bbb37b516c7
      responses:
        '200':
          description: startup script(s) deleted
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Delete startup script
  '/scripts/{scriptId}':
    get:
      tags:
        - Startup Scripts
      description: Return startup script with specific ID
      operationId: getScriptById
      parameters:
        - name: scriptId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/StartupScriptId'
      responses:
        '200':
          description: startup script object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupScript'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Get startup script by id
    delete:
      tags:
        - Startup Scripts
      description: delete a startup script by id
      operationId: deleteScriptById
      parameters:
        - name: scriptId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/StartupScriptId'
      responses:
        '200':
          description: startup script deleted
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      summary: Delete startup script by id
  /balance:
    get:
      summary: Get account balance
      tags:
        - Balance
      responses:
        '200':
          description: Returns the account balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBalance'
              examples:
                50 dollars:
                  value:
                    amount: 50
                    currency: usd
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getBalance
      description: Return account balance
  '/instances/availability/{instanceType}':
    get:
      tags:
        - Instances
      responses:
        '200':
          description: Return instance type availability - true or false
          content:
            application/json:
              schema:
                type: boolean
              examples: {}
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getAvailabilityDeprecated
      description: Check if an instance type is available to deploy for the account
      parameters:
        - schema:
            $ref: '#/components/schemas/InstanceType'
          name: instanceType
          in: path
          description: The type of the instance to check
          required: true
      summary: Check availability (Deprecated)
      deprecated: true
  /oauth2/token:
    post:
      summary: Get access token
      operationId: getAccessToken
      responses:
        '200':
          description: Valid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Access token value
                  token_type:
                    type: string
                    default: Bearer
                    example: Bearer
                    enum:
                      - Bearer
                    description: Bearer token
                  expires_in:
                    type: integer
                    description: Number of second until expires
                  refresh_token:
                    type: string
                    description: Refresh token value
                  scope:
                    type: string
                    description: Access scope
                    example: fullAccess
                required:
                  - access_token
                  - token_type
                  - expires_in
                  - refresh_token
                  - scope
              examples:
                token response:
                  value:
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoZXkiOiJ5b3UgYWN1YWxseSBjaGVja2VkIHRoaXM_In0.0RjcdKQ1NJP9gbRyXITE6LFFLwKGzeeshuubnkkfkb8
                    token_type: Bearer
                    expires_in: 3600
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3b3ciOiJhbmQgdGhpcyB0b28_In0.AC5gk-o-MOptUgrouEErlhr8WT3Hg_RR6px6A0I7ZEk
                    scope: fullAccess
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - invalid_request
                      - invalid_scope
                      - unsupported_grant_type
                      - invalid_grant
                  message:
                    type: string
                required:
                  - code
              examples:
                Unsupported Grant Type:
                  value:
                    code: invalid_request
                    message: unsupported grant type
                Missing client id:
                  value:
                    code: invalid_request
                    message: client_id was not specified
                Missing client secret:
                  value:
                    code: invalid_request
                    message: client_secret was not specified
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                Invalid Client:
                  value:
                    code: unauthorized_request
                    message: Invalid client id or client secret
      description: 'Get an access token, to access datacrunch API endpoints'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    grant_type:
                      type: string
                      default: client_credentials
                      enum:
                        - client_credentials
                      example: client_credentials
                      description: oauth2 grant type
                    client_id:
                      type: string
                    client_secret:
                      type: string
                  required:
                    - grant_type
                    - client_id
                    - client_secret
                - properties:
                    grant_type:
                      type: string
                      enum:
                        - refresh_token
                      default: refresh_token
                      example: refresh_token
                      description: oauth2 grant type
                    refresh_token:
                      type: string
                  required:
                    - grant_type
                    - refresh_token
              type: object
            examples:
              Get Access Token with client credentials:
                value:
                  grant_type: client_credentials
                  client_id: XXXXXXXXXXXXXX
                  client_secret: XXXXXXXXXXXXXX
              Get Access Token using refresh token:
                value:
                  grant_type: refresh_token
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3b3ciOiJhbmQgdGhpcyB0b28_In0.AC5gk-o-MOptUgrouEErlhr8WT3Hg_RR6px6A0I7ZEk
        description: ''
      tags:
        - Authentication
      security: []
  /images:
    get:
      summary: Get all image types
      tags:
        - Images
      responses:
        '200':
          description: all available image types
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getImages
      description: Return all available image types
  /instance-types:
    get:
      summary: Get all instance types
      responses:
        '200':
          description: instances types
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getInstancesTypes
      description: Return all instances types
      tags:
        - Instance Types
      security: []
    parameters: []
  /volumes:
    get:
      summary: Get all Storage Volumes
      tags:
        - Volumes
      responses:
        '200':
          description: Returns an array of all the user's storage volumes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volumes'
              examples:
                example-1:
                  value:
                    - id: cf995e26-ce69-4149-84a3-cdd1e100670f
                      status: attached
                      instance_id: 4fee633c-b119-4447-af9c-70ba17675fc5
                      name: Volume-nxC2tf9F
                      size: 50
                      type: NVMe
                      location_code: FIN-01
                      is_os_volume: true
                      created_at: '2021-06-02T12:56:49.582Z'
                      target: vda
                    - id: ea4edc62-9838-4b7c-bd5b-862f2efec675
                      status: detached
                      instance_id: null
                      name: Volume-iHdL4ysR
                      size: 100
                      type: HDD
                      location_code: FIN-01
                      is_os_volume: false
                      created_at: '2021-06-02T12:56:49.582Z'
                      target: null
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getAllVolumes
      description: 'Return all storage volumes of the user, or all storage volumes with a specific status (optional)'
      parameters:
        - schema:
            type: string
          in: query
          name: status
          description: Return all user storage volumes with specific status
    put:
      summary: Perform action on volume
      tags:
        - Volumes
      operationId: volumeAction
      responses:
        '202':
          description: Action request was accepted
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenAction'
        '404':
          description: Volume not found
      description: "Perform an action on a storage volume or multiple volumes\n\n> Available actions are: \n`attach`, `detach`, `delete`, `rename`, `increase-size`, `restore`, `clone`\n\nNote: to attach, detach or delete a volume, the target / attached instance should be shutdown\n\nWhen `clone`ing a volume, the `name` field is mandatory, and the `type` field is optional. For example, you may want to clone the volume from NVMe to HDD then `type` would be `HDD`."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  oneOf:
                    - $ref: '#/components/schemas/VolumeId'
                    - $ref: '#/components/schemas/VolumeIds'
                action:
                  type: string
                size:
                  type: number
                name:
                  type: string
                  description: needed when cloning a volume
                instance_id:
                  type: string
                type:
                  $ref: '#/components/schemas/VolumeType'
              required:
                - id
                - action
            examples:
              detaching a volume from an instance:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  action: detach
              attaching a volume to an instance:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  action: attach
                  instance_id: 26d43424-229e-4b45-bae2-86eb1e919514
              deleting a volume:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  action: delete
              renaming a volume:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  action: rename
                  name: your-new-volume-name
              increasing a volume's size:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  action: increase-size
                  size: 250
              increasing multiple volumes size:
                value:
                  action: string
                  size: 350
                  name: string
                  instance_id: string
                  id:
                    - 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    - e14cf2ab-3982-4b8f-82b9-b78393f64178
    post:
      summary: Create New Storage Volume
      tags:
        - Volumes
      operationId: createVolume
      responses:
        '202':
          description: 'Accepted, volume is in being created. Returns the volume ID'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Instance to attach to is not shutdown
      description: Create a new storage volume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployVolume'
            examples:
              create volume:
                value:
                  name: volume1
                  size: 40
                  type: NVMe
                  instance_id: 06587974-2dbe-4e10-8bf9-38cce0f5a366
                  location_code: FIN-01
        description: ''
  '/volumes/{volumeId}':
    parameters:
      - schema: {}
        name: volumeId
        in: path
        required: true
        description: volume id
    get:
      summary: Get storage volume by id
      tags:
        - Volumes
      responses:
        '200':
          description: Volume details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    status: attached
                    instance_id: 39cb11a5-6485-4671-b5ac-627eca0cfbc4
                    name: my-volume
                    size: 40
                    type: NVMe
                    location_code: FIN-01
                    is_os_volume: true
                    created_at: '2019-08-24T14:15:22Z'
                    target: vda
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Volume not found
      operationId: getVolumeById
      description: Return a storage volume by id
    delete:
      summary: Delete volume by id
      tags:
        - Volumes
      operationId: deleteVolumeById
      responses:
        '202':
          description: Delete request accepted
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Volume not found
      description: Delete a specific volume by id
  /volume-types:
    get:
      summary: Get Volume Types
      tags:
        - Volumes
      responses:
        '200':
          description: volume types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VolumeTypeDetails'
              examples:
                example:
                  value:
                    - type: NVMe
                      price:
                        currency: usd
                        price_per_month_per_gb: 0.2
                    - type: HDD
                      price:
                        currency: usd
                        price_per_month_per_gb: 0.05
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getVolumeTypes
      description: Returns all volume types
  '/instance-availability/{instanceType}':
    get:
      tags:
        - Instances
      responses:
        '200':
          description: Return instance type availability - true or false
          content:
            application/json:
              schema:
                type: boolean
              examples: {}
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: getAvailability
      description: Check if an instance type is available to deploy for the account
      parameters:
        - schema:
            $ref: '#/components/schemas/InstanceType'
          name: instanceType
          in: path
          description: The type of the instance to check
          required: true
        - schema:
            type: boolean
          in: query
          name: isSpot
          description: Check if the given instance type is available for spot instance (true) or on-demand (false - default)
        - schema:
            type: string
            example: FIN-01
          in: query
          name: locationCode
          description: Check for availability in a specific location
      summary: Check availability
    parameters:
      - schema:
          type: string
        name: instanceType
        in: path
        required: true
        description: Instance type must be one of supported instance types
  /locations:
    get:
      summary: Locations
      tags:
        - Locations
      responses:
        '200':
          description: An array of location objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              examples:
                Example 1:
                  value:
                    - code: FIN-01
                      name: Finland 1
                      country_code: FI
      operationId: getLocations
      description: Returns an array of all the available locations
  /instance-availability:
    get:
      summary: Check all availability
      tags:
        - Instances
      responses:
        '200':
          description: An array of all the available instance types for each location
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationAvailabilities'
              examples:
                Example 1:
                  value:
                    - location_code: FIN-01
                      availabilities:
                        - 8V100.48V
                        - 4V100.20V
                        - 2V100.10V
                        - 1V100.6V
                        - 8RTX6000ADA.80V
                        - 4RTX6000ADA.40V
                        - 2RTX6000ADA.20V
                        - 1RTX6000ADA.10V
                        - 8A6000.80V
                        - 4A6000.40V
                        - 2A6000.20V
                        - 1A6000.10V
                        - 8A100.176V
                        - 4A100.88V
                        - 2A100.44V
                        - 1A100.22V
                        - 8A100.40S.176V
                        - 4A100.40S.88V
                        - 2A100.40S.44V
                        - 1A100.40S.22V
                        - CPU.32V
                        - CPU.16V
                        - CPU.8V
                        - CPU.4V
        '401':
          description: Unauthorized
      operationId: getAllAvailability
      description: Get all instance type availabilities for all locations
      parameters:
        - schema:
            type: boolean
          in: query
          name: isSpot
          description: Check if the given instance type is available for spot instance (true) or on-demand (false - default)
        - schema:
            type: string
            example: FIN-01
          in: query
          name: locationCode
          description: Check for availability in a specific location
components:
  securitySchemes:
    oauth2:
      type: oauth2
      description: This API uses OAuth 2 with client credentials flow.
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token
          scopes:
            fullAccess: full access to the API
          refreshUrl: /oauth2/refresh
    bearer:
      type: http
      scheme: bearer
      description: ''
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InvalidInput:
      description: One or more of the inputs were invalid
    ForbiddenAction:
      description: The Action is forbidden
  schemas:
    StartupScriptId:
      type: string
      description: startup script id. you need to first add a startup script to datacrunch via the startup script endpoint
      example: 26d43424-229e-4b45-bae2-86eb1e919514
    StartupScriptIds:
      type: array
      description: array of startup script ids
      items:
        $ref: '#/components/schemas/StartupScriptId'
      example:
        - 26d43424-229e-4b45-bae2-86eb1e919514
        - 767066ac-78fb-4b06-bbbf-0bbb37b516c7
    StartupScript:
      type: object
      description: startup script object
      example:
        id: de1ab590-892c-4294-9db2-9705049037b3
        name: download repo
        script: |-
          #!/bin/bash
          # Your sh script here
      properties:
        id:
          $ref: '#/components/schemas/StartupScriptId'
        name:
          type: string
          description: name of the startup script
        script:
          type: string
          description: the startup script text
      required:
        - name
        - script
    StartupScripts:
      type: array
      description: an array of startup script objects
      items:
        $ref: '#/components/schemas/StartupScript'
    sshKeyId:
      type: string
      description: ssh key id
      example: 26d43424-229e-4b45-bae2-86eb1e919514
    sshKeyIds:
      type: array
      description: array of ssh key ids
      items:
        $ref: '#/components/schemas/sshKeyId'
      example:
        - 26d43424-229e-4b45-bae2-86eb1e919514
        - 767066ac-78fb-4b06-bbbf-0bbb37b516c7
    sshKey:
      type: object
      description: ssh key object
      example:
        id: 26d43424-229e-4b45-bae2-86eb1e919514
        name: Ukkos kantele
        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC8orN63XfjrkUQUp7cye96/Lx/4gOfs6MzsKLCxX8ACDnXnI9eZkxXuJPr9i6Q+iXNkqcUTB9NyJnfuRx7okPFWvrpzRj3mEs9RZJQ+P3YSfblvxDe2AtRBTZtg2MP0j7afolthS6gdTfhSU+1oRSyvZz0zn0F7TCgem6vNekGLw== tuoni
      properties:
        id:
          $ref: '#/components/schemas/sshKeyId'
        name:
          type: string
          description: ssh key name
        key:
          type: string
          description: the actual public ssh key value
      required:
        - id
        - name
        - key
    sshKeys:
      type: array
      description: array of ssh key objects
      items:
        $ref: '#/components/schemas/sshKey'
      example:
        - id: 26d43424-229e-4b45-bae2-86eb1e919514
          name: Ukkos laptop
          key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC8orN63XfjrkUQUp7cye96/Lx/4gOfs6MzsKLCxX8ACDnXnI9eZkxXuJPr9i6Q+iXNkqcUTB9NyJnfuRx7okPFWvrpzRj3mEs9RZJQ+P3YSfblvxDe2AtRBTZtg2MP0j7afolthS6gdTfhSU+1oRSyvZz0zn0F7TCgem6vNekGLw== tuoni
        - id: 767066ac-78fb-4b06-bbbf-0bbb37b516c7
          name: Tuoni pc
          key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC8orN63XfjrkUQUp7cye96/Lx/4gOfs6MzsKLCxX8ACDnXnI9eZkxXuJPr9i6Q+iXNkqcUTB9NyJnfuRx7okPFWvrpzRj3mEs9RZJQ+P3YSfblvxDe2AtRBTZtg2MP0j7afolthS6gdTfhSU+1oRSyvZz0zn0F7TCgem6vNekGLw== tuoni
    InstanceId:
      type: string
      description: id of an instance
      example: 08458253-6954-4964-aec3-4084f509e05d
      format: uuid
    InstanceIds:
      type: array
      description: an array of instance ids
      items:
        $ref: '#/components/schemas/InstanceId'
      example:
        - 08458253-6954-4964-aec3-4084f509e05d
        - 63dedea9-5bfd-478f-8693-575b3336e0c1
    Instance:
      type: object
      description: Instance details object
      properties:
        created_at:
          type: string
        status:
          $ref: '#/components/schemas/InstanceStatus'
        ip:
          type: string
        cpu:
          type: object
          properties:
            description:
              type: string
            number_of_cores:
              type: number
        gpu:
          type: object
          properties:
            description:
              type: string
            number_of_gpus:
              type: number
        memory:
          type: object
          properties:
            description:
              type: string
            size_in_gigabytes:
              type: number
        storage:
          type: object
          properties:
            description:
              type: string
            size_in_gigabytes:
              type: number
        hostname:
          type: string
        description:
          type: string
        location_code:
          $ref: '#/components/schemas/LocationCode'
        price_per_hour:
          type: number
        instance_type:
          $ref: '#/components/schemas/InstanceType'
        image:
          $ref: '#/components/schemas/Image'
        id:
          $ref: '#/components/schemas/InstanceId'
        startup_script_id:
          $ref: '#/components/schemas/StartupScriptId'
        ssh_key_ids:
          $ref: '#/components/schemas/sshKeyIds'
        os_volume_id:
          $ref: '#/components/schemas/VolumeId'
        gpu_memory:
          type: object
          properties:
            description:
              type: string
            size_in_gigabytes:
              type: number
    Instances:
      type: array
      description: an array of Instance details objects
      items:
        $ref: '#/components/schemas/Instance'
    InstanceStatus:
      type: string
      enum:
        - running
        - provisioning
        - offline
        - starting hibernation
        - hibernating
        - restoring
        - error
    ActionType:
      type: string
      enum:
        - start
        - shutdown
        - hibernate
        - restore
        - delete
    InstanceType:
      type: string
      description: the instance type
      enum:
        - 8V100.48M
        - 8V100.48V
        - 4V100.20V
        - 2V100.10V
        - 1V100.6V
        - 8RTX6000ADA.80V
        - 4RTX6000ADA.40V
        - 2RTX6000ADA.20V
        - 1RTX6000ADA.10V
        - 8A6000.80V
        - 4A6000.40V
        - 2A6000.20V
        - 1A6000.10V
        - 8A100.176V
        - 4A100.88V
        - 2A100.44V
        - 1A100.22V
        - 8A100.40S.176V
        - 4A100.40S.88V
        - 2A100.40S.44V
        - 1A100.40S.22V
        - CPU.4V.16G
        - CPU.8V.32G
        - CPU.16V.64G
        - CPU.32V.128G
        - CPU.64V.256G
        - CPU.96V.384G
        - CPU.120V.480G
    Image:
      type: string
      description: the image type (operating system)
      enum:
        - ubuntu-18.04
        - ubuntu-20.04
        - fastai
        - ubuntu-20.04-cuda-11.2
    DeployInstance:
      type: object
      description: an object describing an instance to deploy
      x-examples:
        deploy instance with 2 extra volumes and custom OS volume:
          value:
            instance_type: 8V100.48M
            image: ubuntu-18.04
            ssh_key_ids: 26d43424-229e-4b45-bae2-86eb1e919514
            startup_script_id: 26d43424-229e-4b45-bae2-86eb1e919514
            hostname: string
            description: string
            location_code: FIN-01
            coupon: FiftyPercentOff
            os_volume:
              name: OS Volume
              size: 100
            volumes:
              - name: small-storage
                size: 50
                type: NVMe
              - name: large-storage
                size: 500
                type: HDD
      properties:
        instance_type:
          $ref: '#/components/schemas/InstanceType'
        image:
          oneOf:
            - $ref: '#/components/schemas/Image'
            - $ref: '#/components/schemas/VolumeId'
        ssh_key_ids:
          oneOf:
            - $ref: '#/components/schemas/sshKeyId'
            - $ref: '#/components/schemas/sshKeyIds'
          description: 'when image value is OS volumeId, ssh_key_ids can be optional.'
        startup_script_id:
          $ref: '#/components/schemas/StartupScriptId'
        hostname:
          type: string
          description: the instance hostname. free text
        description:
          type: string
          description: the instance description. free text
        volumes:
          $ref: '#/components/schemas/DeployVolumes'
        os_volume:
          type: object
          properties:
            name:
              type: string
            size:
              type: integer
          required:
            - name
            - size
        is_spot:
          type: boolean
          description: Should the instance be deployed as a spot instance
        coupon:
          type: string
          description: a discount coupon code
        existing_volumes:
          $ref: '#/components/schemas/VolumeIds'
        location_code:
          $ref: '#/components/schemas/LocationCode'
      required:
        - instance_type
        - image
        - ssh_key_ids
        - hostname
        - description
        - location_code
    LocationCode:
      type: string
      title: Location code
      description: Datacenter Location
      default: FIN-01
      x-examples:
        Location example: FIN-01
      enum:
        - FIN-01
    UserBalance:
      title: UserBalance
      type: object
      description: The user's balance
      x-examples:
        50 dollars:
          amount: 50
          currency: usd
      properties:
        amount:
          type: number
        currency:
          $ref: '#/components/schemas/Currency'
      required:
        - amount
        - currency
    Currency:
      type: string
      title: Currency
      default: usd
      x-examples:
        usd:
          value: usd
      description: currency type
      enum:
        - usd
    VolumeStatus:
      type: string
      title: VolumeStatus
      enum:
        - attached
        - detached
        - deleted
        - ordered
        - creating
        - deleting
      x-examples:
        attached:
          value: attached
        detached:
          value: detached
      description: status of a storage volume
    Volume:
      title: Volume
      type: object
      x-examples:
        'Attached NVMe Volume ':
          value:
            id: cf995e26-ce69-4149-84a3-cdd1e100670f
            status: attached
            instance_id: 4fee633c-b119-4447-af9c-70ba17675fc5
            name: Volume-nxC2tf9F
            size: 50
            type: NVMe
            location_code: FIN-01
            is_os_volume: true
            created_at: '2021-06-02T12:56:49.582Z'
            target: vda
        Detached HDD Volume:
          value:
            id: ea4edc62-9838-4b7c-bd5b-862f2efec675
            status: detached
            instance_id: null
            name: Volume-iHdL4ysR
            size: 100
            type: HDD
            location_code: FIN-01
            is_os_volume: false
            created_at: '2021-06-02T12:56:49.582Z'
            target: null
      description: Storage volume details object
      properties:
        id:
          $ref: '#/components/schemas/VolumeId'
        status:
          $ref: '#/components/schemas/VolumeStatus'
        instance_id:
          type: string
          nullable: true
        name:
          type: string
        size:
          type: number
          minimum: 40
        type:
          $ref: '#/components/schemas/VolumeType'
        is_os_volume:
          type: boolean
        created_at:
          type: string
          format: date-time
        target:
          type: string
          nullable: true
        ssh_key_ids:
          type: array
          items: {}
        location_code:
          $ref: '#/components/schemas/LocationCode'
      required:
        - id
        - status
        - instance_id
        - name
        - size
        - type
        - is_os_volume
        - location_code
    VolumeId:
      type: string
      title: VolumeId
      description: id of a storage volume
      x-examples:
        id:
          value: 497f6eca-6276-4993-bfeb-53cbbbba6f08
      format: uuid
    VolumeTypeDetails:
      type: object
      title: VolumeTypeDetails
      x-examples:
        NVMe:
          value:
            type: NVMe
            price:
              currency: usd
              price_per_month_per_gb: 0.2
        HDD:
          value:
            type: HDD
            price:
              currency: usd
              price_per_month_per_gb: 0.05
      description: storage volume type details
      properties:
        type:
          $ref: '#/components/schemas/VolumeType'
        price:
          type: object
          properties:
            currency:
              $ref: '#/components/schemas/Currency'
            price_per_month_per_gb:
              type: number
    Volumes:
      title: Volumes
      type: array
      description: Array of storage volume objects
      items:
        $ref: '#/components/schemas/Volume'
      x-examples:
        Array of user volumes:
          value:
            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              status: attached
              instance_id: 92bb12b0-7c43-4fa2-bfd3-125744960b30
              name: Volume-nxC2tf9F
              size: 50
              type: NVMe
              location_code: FIN-01
              is_os_volume: true
            - id: ea4edc62-9838-4b7c-bd5b-862f2efec675
              status: detached
              instance_id: null
              name: Volume-iHdL4ysR
              size: 100
              type: HDD
              location_code: FIN-01
              is_os_volume: false
    DeployVolume:
      title: DeployVolume
      type: object
      description: an object describing a volume to deploy
      x-examples:
        'A volume to deploy, with offline instance id to detach to':
          value:
            name: My-Volume
            size: 40
            type: NVMe
            instance_id: 06587974-2dbe-4e10-8bf9-38cce0f5a366
        'A volume to deploy, with no instance to attach to, volume will be detached':
          value:
            name: My-Detached-Volume
            size: 40
            type: NVMe
      properties:
        name:
          type: string
          maxLength: 60
        size:
          type: number
          minimum: 40
        type:
          $ref: '#/components/schemas/VolumeType'
        instance_id:
          type: string
          format: uuid
        location_code:
          $ref: '#/components/schemas/LocationCode'
      required:
        - name
        - size
        - type
    DeployVolumes:
      title: DeployVolumes
      type: array
      items:
        $ref: '#/components/schemas/DeployVolume'
      description: An array of volumes data to deploy
    VolumeIds:
      title: VolumeIds
      type: array
      description: array of storage volume ids
      items:
        $ref: '#/components/schemas/VolumeId'
    VolumeType:
      type: string
      title: VolumeType
      enum:
        - NVMe
        - HDD
      x-examples:
        NVMe:
          value: NVMe
        HDD:
          value: HDD
      description: storage volume type
    Location:
      title: Location
      type: object
      properties:
        code:
          $ref: '#/components/schemas/LocationCode'
        name:
          type: string
          x-stoplight:
            id: 7ldhm5bpo41qt
        country_code:
          type: string
          x-stoplight:
            id: ao6k2b918cvi5
      x-examples:
        Example 1:
          code: FIN-01
          name: Finland 1
          country_code: FI
      description: An object describing a location
    LocationAvailabilities:
      title: LocationAvailabilities
      x-stoplight:
        id: ezt25d46bvfhq
      type: object
      properties:
        location_code:
          $ref: '#/components/schemas/LocationCode'
        availabilites:
          type: array
          x-stoplight:
            id: 0cjvxnexahjlx
          items:
            $ref: '#/components/schemas/InstanceType'
      x-examples:
        Example 1:
          location_code: FIN-01
          availabilites:
            - 8V100.48M
