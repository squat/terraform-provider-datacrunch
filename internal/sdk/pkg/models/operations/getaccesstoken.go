// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/squat/terraform-provider-datacrunch/internal/sdk/pkg/utils"
	"net/http"
)

// GetAccessTokenGrantType - oauth2 grant type
type GetAccessTokenGrantType string

const (
	GetAccessTokenGrantTypeRefreshToken GetAccessTokenGrantType = "refresh_token"
)

func (e GetAccessTokenGrantType) ToPointer() *GetAccessTokenGrantType {
	return &e
}

func (e *GetAccessTokenGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refresh_token":
		*e = GetAccessTokenGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccessTokenGrantType: %v", v)
	}
}

type Two struct {
	// oauth2 grant type
	GrantType    *GetAccessTokenGrantType `default:"refresh_token" json:"grant_type"`
	RefreshToken string                   `json:"refresh_token"`
}

func (t Two) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Two) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Two) GetGrantType() *GetAccessTokenGrantType {
	if o == nil {
		return nil
	}
	return o.GrantType
}

func (o *Two) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

// GrantType - oauth2 grant type
type GrantType string

const (
	GrantTypeClientCredentials GrantType = "client_credentials"
)

func (e GrantType) ToPointer() *GrantType {
	return &e
}

func (e *GrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_credentials":
		*e = GrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrantType: %v", v)
	}
}

type One struct {
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	// oauth2 grant type
	GrantType *GrantType `default:"client_credentials" json:"grant_type"`
}

func (o One) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *One) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *One) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *One) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *One) GetGrantType() *GrantType {
	if o == nil {
		return nil
	}
	return o.GrantType
}

type GetAccessTokenRequestBodyType string

const (
	GetAccessTokenRequestBodyTypeOne GetAccessTokenRequestBodyType = "1"
	GetAccessTokenRequestBodyTypeTwo GetAccessTokenRequestBodyType = "2"
)

type GetAccessTokenRequestBody struct {
	One *One
	Two *Two

	Type GetAccessTokenRequestBodyType
}

func CreateGetAccessTokenRequestBodyOne(one One) GetAccessTokenRequestBody {
	typ := GetAccessTokenRequestBodyTypeOne

	return GetAccessTokenRequestBody{
		One:  &one,
		Type: typ,
	}
}

func CreateGetAccessTokenRequestBodyTwo(two Two) GetAccessTokenRequestBody {
	typ := GetAccessTokenRequestBodyTypeTwo

	return GetAccessTokenRequestBody{
		Two:  &two,
		Type: typ,
	}
}

func (u *GetAccessTokenRequestBody) UnmarshalJSON(data []byte) error {

	two := new(Two)
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = two
		u.Type = GetAccessTokenRequestBodyTypeTwo
		return nil
	}

	one := new(One)
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = one
		u.Type = GetAccessTokenRequestBodyTypeOne
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAccessTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetAccessTokenAuthenticationResponseResponseBody - Unauthorized
type GetAccessTokenAuthenticationResponseResponseBody struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (o *GetAccessTokenAuthenticationResponseResponseBody) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *GetAccessTokenAuthenticationResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type Code string

const (
	CodeInvalidRequest       Code = "invalid_request"
	CodeInvalidScope         Code = "invalid_scope"
	CodeUnsupportedGrantType Code = "unsupported_grant_type"
	CodeInvalidGrant         Code = "invalid_grant"
)

func (e Code) ToPointer() *Code {
	return &e
}

func (e *Code) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_request":
		fallthrough
	case "invalid_scope":
		fallthrough
	case "unsupported_grant_type":
		fallthrough
	case "invalid_grant":
		*e = Code(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Code: %v", v)
	}
}

// GetAccessTokenAuthenticationResponseBody - Invalid request
type GetAccessTokenAuthenticationResponseBody struct {
	Code    Code    `json:"code"`
	Message *string `json:"message,omitempty"`
}

func (o *GetAccessTokenAuthenticationResponseBody) GetCode() Code {
	if o == nil {
		return Code("")
	}
	return o.Code
}

func (o *GetAccessTokenAuthenticationResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

// TokenType - Bearer token
type TokenType string

const (
	TokenTypeBearer TokenType = "Bearer"
)

func (e TokenType) ToPointer() *TokenType {
	return &e
}

func (e *TokenType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bearer":
		*e = TokenType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenType: %v", v)
	}
}

// GetAccessTokenResponseBody - Valid credentials
type GetAccessTokenResponseBody struct {
	// Access token value
	AccessToken string `json:"access_token"`
	// Number of second until expires
	ExpiresIn int64 `json:"expires_in"`
	// Refresh token value
	RefreshToken string `json:"refresh_token"`
	// Access scope
	Scope string `json:"scope"`
	// Bearer token
	TokenType *TokenType `default:"Bearer" json:"token_type"`
}

func (g GetAccessTokenResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAccessTokenResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAccessTokenResponseBody) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *GetAccessTokenResponseBody) GetExpiresIn() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresIn
}

func (o *GetAccessTokenResponseBody) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *GetAccessTokenResponseBody) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *GetAccessTokenResponseBody) GetTokenType() *TokenType {
	if o == nil {
		return nil
	}
	return o.TokenType
}

type GetAccessTokenResponse struct {
	// Valid credentials
	TwoHundredApplicationJSONObject *GetAccessTokenResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *GetAccessTokenAuthenticationResponseBody
	// Unauthorized
	FourHundredAndOneApplicationJSONObject *GetAccessTokenAuthenticationResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAccessTokenResponse) GetTwoHundredApplicationJSONObject() *GetAccessTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetAccessTokenResponse) GetFourHundredApplicationJSONObject() *GetAccessTokenAuthenticationResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *GetAccessTokenResponse) GetFourHundredAndOneApplicationJSONObject() *GetAccessTokenAuthenticationResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOneApplicationJSONObject
}

func (o *GetAccessTokenResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAccessTokenResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAccessTokenResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
