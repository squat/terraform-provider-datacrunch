// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/squat/terraform-provider-datacrunch/internal/sdk/pkg/models/shared"
	"github.com/squat/terraform-provider-datacrunch/internal/sdk/pkg/utils"
	"net/http"
)

type VolumeActionIDType string

const (
	VolumeActionIDTypeStr        VolumeActionIDType = "str"
	VolumeActionIDTypeArrayOfstr VolumeActionIDType = "arrayOfstr"
)

type VolumeActionID struct {
	Str        *string
	ArrayOfstr []string

	Type VolumeActionIDType
}

func CreateVolumeActionIDStr(str string) VolumeActionID {
	typ := VolumeActionIDTypeStr

	return VolumeActionID{
		Str:  &str,
		Type: typ,
	}
}

func CreateVolumeActionIDArrayOfstr(arrayOfstr []string) VolumeActionID {
	typ := VolumeActionIDTypeArrayOfstr

	return VolumeActionID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *VolumeActionID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = VolumeActionIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = VolumeActionIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VolumeActionID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type VolumeActionRequestBody struct {
	Action     string         `json:"action"`
	ID         VolumeActionID `json:"id"`
	InstanceID *string        `json:"instance_id,omitempty"`
	// needed when cloning a volume
	Name *string  `json:"name,omitempty"`
	Size *float64 `json:"size,omitempty"`
	// storage volume type
	Type *shared.VolumeType `json:"type,omitempty"`
}

func (o *VolumeActionRequestBody) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *VolumeActionRequestBody) GetID() VolumeActionID {
	if o == nil {
		return VolumeActionID{}
	}
	return o.ID
}

func (o *VolumeActionRequestBody) GetInstanceID() *string {
	if o == nil {
		return nil
	}
	return o.InstanceID
}

func (o *VolumeActionRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *VolumeActionRequestBody) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *VolumeActionRequestBody) GetType() *shared.VolumeType {
	if o == nil {
		return nil
	}
	return o.Type
}

type VolumeActionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *VolumeActionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *VolumeActionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *VolumeActionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
