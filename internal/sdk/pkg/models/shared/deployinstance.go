// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/squat/terraform-provider-datacrunch/internal/sdk/pkg/utils"
)

type DeployInstanceImageType string

const (
	DeployInstanceImageTypeImage DeployInstanceImageType = "Image"
	DeployInstanceImageTypeStr   DeployInstanceImageType = "str"
)

type DeployInstanceImage struct {
	Image *Image
	Str   *string

	Type DeployInstanceImageType
}

func CreateDeployInstanceImageImage(image Image) DeployInstanceImage {
	typ := DeployInstanceImageTypeImage

	return DeployInstanceImage{
		Image: &image,
		Type:  typ,
	}
}

func CreateDeployInstanceImageStr(str string) DeployInstanceImage {
	typ := DeployInstanceImageTypeStr

	return DeployInstanceImage{
		Str:  &str,
		Type: typ,
	}
}

func (u *DeployInstanceImage) UnmarshalJSON(data []byte) error {

	image := new(Image)
	if err := utils.UnmarshalJSON(data, &image, "", true, true); err == nil {
		u.Image = image
		u.Type = DeployInstanceImageTypeImage
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = DeployInstanceImageTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DeployInstanceImage) MarshalJSON() ([]byte, error) {
	if u.Image != nil {
		return utils.MarshalJSON(u.Image, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OsVolume struct {
	Name string `json:"name"`
	Size int64  `json:"size"`
}

func (o *OsVolume) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OsVolume) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

type SSHKeyIdsType string

const (
	SSHKeyIdsTypeStr        SSHKeyIdsType = "str"
	SSHKeyIdsTypeArrayOfstr SSHKeyIdsType = "arrayOfstr"
)

type SSHKeyIds struct {
	Str        *string
	ArrayOfstr []string

	Type SSHKeyIdsType
}

func CreateSSHKeyIdsStr(str string) SSHKeyIds {
	typ := SSHKeyIdsTypeStr

	return SSHKeyIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateSSHKeyIdsArrayOfstr(arrayOfstr []string) SSHKeyIds {
	typ := SSHKeyIdsTypeArrayOfstr

	return SSHKeyIds{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *SSHKeyIds) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = SSHKeyIdsTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = SSHKeyIdsTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SSHKeyIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DeployInstance - an object describing an instance to deploy
type DeployInstance struct {
	// a discount coupon code
	Coupon *string `json:"coupon,omitempty"`
	// the instance description. free text
	Description string `json:"description"`
	// array of storage volume ids
	ExistingVolumes []string `json:"existing_volumes,omitempty"`
	// the instance hostname. free text
	Hostname string              `json:"hostname"`
	Image    DeployInstanceImage `json:"image"`
	// the instance type
	InstanceType InstanceType `json:"instance_type"`
	// Should the instance be deployed as a spot instance
	IsSpot *bool `json:"is_spot,omitempty"`
	// Datacenter Location
	LocationCode *LocationCode `default:"FIN-01" json:"location_code"`
	OsVolume     *OsVolume     `json:"os_volume,omitempty"`
	// when image value is OS volumeId, ssh_key_ids can be optional.
	SSHKeyIds SSHKeyIds `json:"ssh_key_ids"`
	// startup script id. you need to first add a startup script to datacrunch via the startup script endpoint
	StartupScriptID *string `json:"startup_script_id,omitempty"`
	// An array of volumes data to deploy
	Volumes []DeployVolume `json:"volumes,omitempty"`
}

func (d DeployInstance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeployInstance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DeployInstance) GetCoupon() *string {
	if o == nil {
		return nil
	}
	return o.Coupon
}

func (o *DeployInstance) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *DeployInstance) GetExistingVolumes() []string {
	if o == nil {
		return nil
	}
	return o.ExistingVolumes
}

func (o *DeployInstance) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *DeployInstance) GetImage() DeployInstanceImage {
	if o == nil {
		return DeployInstanceImage{}
	}
	return o.Image
}

func (o *DeployInstance) GetInstanceType() InstanceType {
	if o == nil {
		return InstanceType("")
	}
	return o.InstanceType
}

func (o *DeployInstance) GetIsSpot() *bool {
	if o == nil {
		return nil
	}
	return o.IsSpot
}

func (o *DeployInstance) GetLocationCode() *LocationCode {
	if o == nil {
		return nil
	}
	return o.LocationCode
}

func (o *DeployInstance) GetOsVolume() *OsVolume {
	if o == nil {
		return nil
	}
	return o.OsVolume
}

func (o *DeployInstance) GetSSHKeyIds() SSHKeyIds {
	if o == nil {
		return SSHKeyIds{}
	}
	return o.SSHKeyIds
}

func (o *DeployInstance) GetStartupScriptID() *string {
	if o == nil {
		return nil
	}
	return o.StartupScriptID
}

func (o *DeployInstance) GetVolumes() []DeployVolume {
	if o == nil {
		return nil
	}
	return o.Volumes
}
